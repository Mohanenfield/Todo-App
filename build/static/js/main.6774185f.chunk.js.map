{"version":3,"sources":["components/modals/CreateTask.js","components/modals/EditTask.js","components/Card.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["CreateTask","modal","toggle","save","useState","title","setTitle","description","setDescription","name","setName","handleChange","e","target","value","isOpen","className","type","onChange","rows","color","onClick","taskObj","EditTaskPopup","updateTask","useEffect","Title","Description","Name","preventDefault","tempObj","Card","index","deleteTask","updateListArray","setModal","colors","primaryColor","secondaryColor","style","EditTask","obj","TodoList","taskList","setTaskList","arr","localStorage","getItem","JSON","parse","tempList","splice","setItem","stringify","window","location","reload","map","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6774185f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst CreateTask = ({ modal, toggle, save }) => {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        if (name == \"title\") {\r\n            setTitle(value);\r\n        } else if (name == \"description\") {\r\n            setDescription(value);\r\n        } else {\r\n            setName(value);\r\n        }\r\n    }\r\n\r\n    const handleSave = () => {\r\n        let taskObj = {};\r\n        taskObj[\"Title\"] = title\r\n        taskObj[\"Description\"] = description\r\n        taskObj[\"Name\"] = name\r\n        save(taskObj);\r\n\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Create Task</ModalHeader>\r\n            <ModalBody>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Title of the action item</label>\r\n                    <input type=\"text\" className=\"form-control\" name=\"title\" value={title} onChange={handleChange} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Description</label>\r\n                    <textarea rows=\"5\" className=\"form-control\" name=\"description\" value={description} onChange={handleChange}></textarea>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Name of the Person Assigned</label>\r\n                    <input type=\"text\" className=\"form-control\" name=\"name\" value={name} onChange={handleChange} />\r\n                </div>\r\n\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"primary\" onClick={handleSave}>Create</Button>{' '}\r\n                <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default CreateTask;","import React, { useState, useEffect } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst EditTaskPopup = ({ modal, toggle, updateTask, taskObj }) => {\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [name, setName] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n\r\n        const { name, value } = e.target\r\n\r\n        if (name == \"title\") {\r\n            setTitle(value);\r\n        } else if (name == \"description\") {\r\n            setDescription(value);\r\n        } else {\r\n            setName(value);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTitle(taskObj.Title)\r\n        setDescription(taskObj.Description)\r\n        setName(taskObj.Name)\r\n    }, [])\r\n\r\n    const handleUpdate = (e) => {\r\n        e.preventDefault();\r\n        let tempObj = {}\r\n        tempObj['Title'] = title\r\n        tempObj['Description'] = description\r\n        tempObj['Name'] = name\r\n        updateTask(tempObj)\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Update Task</ModalHeader>\r\n            <ModalBody>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Title for action item</label>\r\n                    <input type=\"text\" className=\"form-control\" value={title} onChange={handleChange} name=\"title\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Description</label>\r\n                    <textarea rows=\"5\" className=\"form-control\" value={description} onChange={handleChange} name=\"description\"></textarea>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Name of the person</label>\r\n                    <input type=\"text\" className=\"form-control\" value={name} onChange={handleChange} name=\"name\" />\r\n                </div>\r\n\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"primary\" onClick={handleUpdate}>Update</Button>{' '}\r\n                <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default EditTaskPopup;","import React, { useState } from 'react';\r\nimport EditTask from './modals/EditTask';\r\n\r\n\r\nconst Card = ({ taskObj, index, deleteTask, updateListArray }) => {\r\n    const [modal, setModal] = useState(false);\r\n\r\n\r\n    const colors = [\r\n        {\r\n            primaryColor: \"#5D93E1\",\r\n            secondaryColor: \"#ECF3FC\"\r\n        },\r\n        {\r\n            primaryColor: \"#F9D288\",\r\n            secondaryColor: \"#FEFAF1\"\r\n        },\r\n        {\r\n            primaryColor: \"#5DC250\",\r\n            secondaryColor: \"#F2FAF1\"\r\n        },\r\n        {\r\n            primaryColor: \"#F48687\",\r\n            secondaryColor: \"#FDF1F1\"\r\n        },\r\n        {\r\n            primaryColor: \"#B964F7\",\r\n            secondaryColor: \"#F3F0FD\"\r\n        }\r\n    ]\r\n\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n    }\r\n\r\n    const updateTask = (obj) => {\r\n        updateListArray(obj, index)\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        deleteTask(index)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"card-wrapper m-1 mb-3\">\r\n\r\n                <div className=\"card-top\" style={{ \"background-color\": colors[index % 5].primaryColor }}></div>\r\n                <div className=\"task-holder\">\r\n\r\n                    <span className=\"card-header\" style={{ \"background-color\": colors[index % 5].secondaryColor, \"border-radius\": \"10px\" }}>{taskObj.Title}</span>\r\n                    <p className=\"mt-3\" style={{ \"width\": \"auto\" }}>{taskObj.Description}</p>\r\n                    <p className=\"mb-3\" style={{ \"width\": \"auto\" }}>{taskObj.Name}</p>\r\n\r\n                    <div style={{ \"position\": \"absolute\", \"right\": \"20px\", \"bottom\": \"20px\" }}>\r\n                        <i className=\"far fa-edit m-3\" style={{ \"color\": colors[index % 5].primaryColor, \"cursor\": \"pointer\" }} onClick={() => setModal(true)}></i>\r\n                        <i className=\"fas fa-trash-alt mt-5\" style={{ \"color\": colors[index % 5].primaryColor, \"cursor\": \"pointer\" }} onClick={handleDelete}></i>\r\n                    </div>\r\n\r\n                </div>\r\n                <EditTask modal={modal} toggle={toggle} updateTask={updateTask} taskObj={taskObj} />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Card;","import React, { useEffect, useState } from 'react';\r\nimport CreateTask from './modals/CreateTask'\r\nimport Cards from './Card';\r\n\r\n\r\nconst TodoList = () => {\r\n    const [modal, setModal] = useState(false);\r\n    const [taskList, setTaskList] = useState([])\r\n\r\n    useEffect(() => {\r\n        let arr = localStorage.getItem(\"taskList\")\r\n\r\n        if (arr) {\r\n            let obj = JSON.parse(arr)\r\n            setTaskList(obj)\r\n        }\r\n    }, [])\r\n\r\n\r\n    const deleteTask = (index) => {\r\n        let tempList = taskList\r\n        tempList.splice(index, 1)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n\r\n    const updateListArray = (obj, index) => {\r\n        let tempList = taskList\r\n        tempList[index] = obj\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n    }\r\n\r\n    const saveTask = (taskObj) => {\r\n        let tempList = taskList\r\n        tempList.push(taskObj)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(taskList)\r\n        setModal(false)\r\n        window.location.reload()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"header text-center\">\r\n                <h3>Todo List</h3>\r\n                <button className=\"btn btn-primary mt-2\" onClick={() => setModal(true)} >Create List</button>\r\n\r\n            </div>\r\n            <div className=\"task-container\">\r\n                {taskList && taskList.map((obj, index) => <Cards taskObj={obj} index={index} deleteTask={deleteTask} updateListArray={updateListArray} />)}\r\n            </div>\r\n            <CreateTask toggle={toggle} modal={modal} save={saveTask} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoList;","\nimport './App.css';\nimport TodoList from './components/TodoList'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n// import 'font-awesome/css/font-awesome.min.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}